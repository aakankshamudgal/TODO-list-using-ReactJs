{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","newItem","list","todoValue","id","Date","now","value","isDone","this","push","setState","updatedList","filter","item","input","className","type","placeholder","required","onChange","e","updatedInput","target","onClick","addItem","disabled","length","map","key","name","deleteItem","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAoFeA,G,wDAhFb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,QAAU,GACVC,KAAM,IAJQ,E,oDAQRC,GACJ,GAAiB,KAAdA,EAAiB,CAClB,IAAMF,EAAU,CACdG,GAAIC,KAAKC,MACTC,MAAMJ,EACNK,QAAQ,GAEJN,EAAI,YAAOO,KAAKT,MAAME,MAC5BA,EAAKQ,KAAKT,GACVQ,KAAKE,SAAS,CACZT,OACAD,QAAS,Q,iCAKNG,GACT,IACMQ,EADI,YAAOH,KAAKT,MAAME,MACHW,QAAO,SAAAC,GAAI,OAAIA,EAAKV,KAAOA,KACpDK,KAAKE,SAAS,CAACT,KAAMU,M,mCAGVG,GACXN,KAAKE,SAAS,CAACV,QAAQc,M,+BAKlB,IAAD,OACN,OAAO,6BAEP,yBAAKC,UAAU,+BAA8B,yCAC7C,yBAAKA,UAAU,OACb,yBAAKA,UAAU,OACjB,yBAAKA,UAAU,QACb,yBAAKA,UAAU,aACjB,2BAAOC,KAAK,OAAOD,UAAU,aAAaE,YAAY,aAAaC,UAAQ,EAACZ,MAAOE,KAAKT,MAAMC,QAASmB,SAAU,SAAAC,GAAC,OAAI,EAAKC,aAAaD,EAAEE,OAAOhB,UAAU,6BAC3J,4BAAQS,UAAU,2BAA2BQ,QAAS,kBAAM,EAAKC,QAAQ,EAAKzB,MAAMC,UAAUyB,UAAWjB,KAAKT,MAAMC,QAAQ0B,QAA5H,YACA,6BACA,wBAAIX,UAAU,QACVP,KAAKT,MAAME,KAAK0B,KAAI,SAAAd,GACpB,OACE,wBAAIe,IAAOf,EAAKV,IACd,2BAAOY,UAAU,QACjBC,KAAK,WACLa,KAAK,SAELV,SAAU,eAETN,EAAKP,MACN,4BAAQS,UAAU,mBAAmBQ,QAAS,kBAAM,EAAKO,WAAWjB,EAAKV,MAAzE,yB,GA3DM4B,IAAMC,YCSJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4c2808aa.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      newItem : \"\",\n      list: []\n    }\n  }\n\n    addItem(todoValue){\n        if(todoValue !== \"\"){\n          const newItem = {\n            id: Date.now(),\n            value:todoValue,\n            isDone: false\n          };\n          const list = [...this.state.list];\n          list.push(newItem);\n          this.setState({\n            list,\n            newItem: \"\"\n          });\n        }\n    }\n\n    deleteItem(id){\n      const list = [...this.state.list];\n      const updatedList = list.filter(item => item.id !== id);\n      this.setState({list: updatedList})\n    }\n\n    updatedInput(input){\n      this.setState({newItem:input});\n    }\n\n\n\n  render(){\n    return <div>\n    \n    <div className=\"container-fluid text-center\"><h1>TODO App</h1></div>\n    <div className=\"row\">\n      <div className=\"col\">\n    <div className=\"card\" >\n      <div className=\"card-body\">\n    <input type=\"text\" className=\"input-text\" placeholder=\"Add a task\" required value={this.state.newItem} onChange={e => this.updatedInput(e.target.value)} /><br />\n    <button className=\"btn btn-primary mt-2 fon\" onClick={() => this.addItem(this.state.newItem)} disabled={!this.state.newItem.length}>Add Todo</button>\n    <div>\n    <ul className=\"mt-2\">\n      { this.state.list.map(item => { \n        return (\n          <li key = {item.id}>\n            <input className=\"field\"\n            type=\"checkbox\"\n            name=\"idDone\"\n            //checked={item.isDone}\n            onChange={() => {} }\n            />\n            {item.value}\n            <button className=\"btn btn-dark m-2\" onClick={() => this.deleteItem(item.id)}>Delete</button>\n            </li>\n        )\n      })\n\n\n      }\n{/* <li>\n  <input type=\"checkbox\" name=\"\" className=\"p-3 inp\" />Study and fix\n  <button className=\"btn btn-dark ml-2\">Delete</button>\n</li> */}\n        </ul> \n        \n     </div>\n        </div> \n        </div>\n</div>\n</div>\n</div>\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}